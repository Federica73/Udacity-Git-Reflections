
1)
How is the staging area different from the working directory and the repository? What value do you think it offers?
It is a place in the middle, where I can modify my files, decide to remove or add a file if I deemed necessary and commit only when I feel it is logical to do so. I can track better than in working directory, but still have more flexibility than in repository.
2)
How can you use the staging area to make sure you have one commit per logical change?
Adding the file to the staging area when I am satisfied with the change and I feel that further modification goes beyond the intent of the foreseen commit. Ideally I would take a short break and then revise the file in the staging area to be sure that I do not have too many or too few changes.
3)
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
One typical situation is when I´d like to experiment some features in the code, not knowing it it brings to anything, e.g. adding polimers in Project 2. Or when I add a language.
4)
How do the diagrams help you visualize the branch structure?
They help visualizing which commits are in common to two or more branches and if there commits which are not breachable. They are also useful to se at which point new features (= branches) were intoduced.
5)
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
We have the master branch combining all the changes done in the master and in the branch, irrespective of the author of the changes. Realy a great facilitation!The diagram was drwan this way to emphatize that the merged branch is interrupted and all the changes are contained in the master branch.
6)
What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Git does not forget any change and combines them in temporal sequence. In addition, it warns us if one file was changed in parallel and mark the conflict with <<<<. It leaves to us the task to solve the conflict and decide which code is the most appropriate.